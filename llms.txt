# Champion Trader

> Champion Trader is a modern React TypeScript trading application that provides real-time market data and contract pricing through efficient streaming technologies. The application uses Server-Sent Events (SSE) for improved performance, automatic reconnection, and easier integration with modern load balancers. Built with React 18, TypeScript, TailwindCSS, Zustand for state management, and Axios for API communication, the project strictly follows Test-Driven Development (TDD) methodology and Atomic Component Design principles.

The application is structured around modular, self-contained components and uses a simple, function-based approach to real-time data handling. It supports multiple environments (development, staging, production) with environment-specific configurations and maintains a minimum of 90% test coverage across all components.

## Project Structure

- [Project Overview](STRUCTURE.md): Complete project structure, organization, and development practices
- [Directory Layout](STRUCTURE.md#source-code-src): Detailed source code organization
- [Configuration Files](STRUCTURE.md#configuration-files): Build, development, and testing configurations
- [Module Dependencies](STRUCTURE.md#module-dependencies): Core and development dependencies

## Future Enhancements

The following components are implemented but reserved for future use:

### Desktop Support
- `desktop-number-input-field`: Enhanced number input optimized for desktop
- `desktop-trade-field-card`: Desktop-optimized trade parameter card
- `orientationStore`: Device orientation handling for responsive layouts

### Component Documentation
- [Components Overview](src/components/README.md)
- [UI Components](src/components/ui/README.md)
- [Balance Management](src/components/BalanceHandler/README.md)
- [Bottom Sheet](src/components/BottomSheet/README.md)
- [Chart](src/components/Chart/README.md)
- [Stake Component](src/components/Stake/README.md)
  - [SSE Integration](src/components/Stake/hooks/useStakeSSE.ts)
  - [Validation](src/components/Stake/utils/validation.ts)
- [Positions Sidebar](src/components/PositionsSidebar/README.md)
  - Overview: A sidebar component that displays open and closed trading positions
  - Features:
    - Tab switching between open and closed positions
    - Filtering by trade types (for open positions)
    - Filtering by time periods (for closed positions)
    - Real-time position updates
    - Total profit/loss display
  - Components:
    - FilterDropdown: Reusable dropdown component for position filtering
    - Custom Hooks:
      - useFilteredPositions: Manages position filtering logic
  - Implementation:
    - Follows Atomic Design principles
    - Uses TypeScript for type safety
    - Implements TDD with comprehensive test coverage
    - Responsive layout with proper overflow handling
    - Modular and maintainable code structure

## Typography System

The application uses a consistent typography system based on IBM Plex Sans:

### Text Styles

#### Caption Regular (Small Text)
```css
font-family: IBM Plex Sans;
font-size: 12px;
font-weight: 400;
line-height: 18px;
text-align: left;
```

#### Body Regular (Default Text)
```css
font-family: IBM Plex Sans;
font-size: 16px;
font-weight: 400;
line-height: 24px;
text-align: left;
```

### Layout Principles
- Components should take full available width where appropriate
- Text content should be consistently left-aligned
- Maintain proper spacing and padding for readability
- Use responsive design patterns for different screen sizes

## Architecture

- [Component Structure](src/components/README.md): Comprehensive guide on TDD implementation, Atomic Component Design, and component organization
- [Trade Configuration System](#trade-configuration-system): Configuration-driven trade form system with lazy loading

## Configuration System

The application implements a flexible, configuration-driven system that supports multiple trade types and real-time updates:

### Configuration Files
- [Trade Types Configuration](src/config/TRADE_TYPES.md): Comprehensive guide for adding and configuring trade types
- [Stake Config](src/config/stake.ts): Stake limits and SSE settings
- See [Configuration Guide](src/config/README.md)

### Utilities
- [Duration Utils](src/utils/duration.ts): Centralized duration handling for:
  - Duration formatting and parsing
  - Range validation and generation
  - Special case handling (e.g., hours with minutes)
  - Type-safe operations with DurationRangesResponse

### Form Controller
- Dynamic form rendering based on trade type
- Lazy-loaded components with Suspense boundaries
- Responsive layouts for desktop/mobile
- See [Trade Form Controller](src/screens/TradePage/components/README.md)

### Action Handlers
- Centralized trade actions in useTradeActions hook
- Integration with trade store
- Type-safe action definitions
- Extensible for new trade types
- [Bottom Sheet Store](src/stores/bottomSheetStore.ts): Centralized bottom sheet state management with TDD examples
- [SSE Services](src/services/api/sse/README.md): Simple, function-based SSE implementation for real-time market and contract price updates
- [State Management](src/stores/README.md): Detailed guide on Zustand store implementation, TDD approach, and state management patterns
- [Balance Management](#balance-management): Overview of balance management including [Balance Service](src/services/api/rest/balance/README.md) and components such as [BalanceDisplay](src/components/BalanceDisplay/README.md) and [BalanceHandler](src/components/BalanceHandler/README.md)

## Development Methodology

- [Test-Driven Development](README.md#development-methodology): Detailed TDD process with Red-Green-Refactor cycle
- [Atomic Component Design](README.md#atomic-component-design): Guidelines for building self-contained, independent components
- [Testing Requirements](README.md#testing): Comprehensive testing approach with 90% coverage requirement

## API Integration

- [REST API Documentation](src/services/api/rest/README.md): Available endpoints and usage examples for REST API integration
- [SSE Services](src/services/api/sse/README.md): Real-time data streaming service with:
  - Automatic endpoint selection and reconnection
  - Type-safe message handling
  - Integration with stake and duration components
  - Debounced updates and error handling

## State Management

- [Store Organization](src/stores/README.md#store-organization): Detailed store structure and implementation
- [Trade Store](src/stores/tradeStore.ts): Configuration-driven trade type management with field and button state handling
- [TDD for Stores](src/stores/README.md#test-driven-development): Test-first approach for store development
- [Store Guidelines](src/stores/README.md#store-guidelines): Best practices and patterns for state management
- [Client Store](src/stores/clientStore.ts): Manages client configuration including balance integration.

## Component Development

- [Component Guidelines](src/components/README.md#component-guidelines): Detailed component development process
- [Testing Patterns](src/components/README.md#test-first-implementation): Comprehensive testing examples and patterns
- [Best Practices](src/components/README.md#best-practices): Component design, testing, performance, and accessibility guidelines
- [BalanceDisplay Component](src/components/BalanceDisplay/README.md)
- [BalanceHandler Component](src/components/BalanceHandler/README.md)

## Optional

- [Environment Configuration](README.md#environment-configuration): Detailed environment-specific settings
- [Version Control Guidelines](README.md#version-control): Commit message format and branching strategy
- [Production Build](README.md#building-for-production): Production build process and optimization

## Documentation Updates

This documentation is regularly maintained and updated to reflect the current state of the codebase. All changes to the implementation must be accompanied by corresponding updates to the relevant documentation files.
